/* Auto-generated by genmsg_cpp for file /home/jmainpri/workspace/drc/wpi_openrave/hubo/hackdrc_wave_planner/srv/HuboWaveTraj.srv */
#ifndef HACKDRC_WAVE_PLANNER_SERVICE_HUBOWAVETRAJ_H
#define HACKDRC_WAVE_PLANNER_SERVICE_HUBOWAVETRAJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Empty.h"


#include "trajectory_msgs/JointTrajectory.h"

namespace hackdrc_wave_planner
{
template <class ContainerAllocator>
struct HuboWaveTrajRequest_ {
  typedef HuboWaveTrajRequest_<ContainerAllocator> Type;

  HuboWaveTrajRequest_()
  : Request()
  {
  }

  HuboWaveTrajRequest_(const ContainerAllocator& _alloc)
  : Request(_alloc)
  {
  }

  typedef  ::std_msgs::Empty_<ContainerAllocator>  _Request_type;
   ::std_msgs::Empty_<ContainerAllocator>  Request;


  typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HuboWaveTrajRequest
typedef  ::hackdrc_wave_planner::HuboWaveTrajRequest_<std::allocator<void> > HuboWaveTrajRequest;

typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajRequest> HuboWaveTrajRequestPtr;
typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajRequest const> HuboWaveTrajRequestConstPtr;


template <class ContainerAllocator>
struct HuboWaveTrajResponse_ {
  typedef HuboWaveTrajResponse_<ContainerAllocator> Type;

  HuboWaveTrajResponse_()
  : Response()
  {
  }

  HuboWaveTrajResponse_(const ContainerAllocator& _alloc)
  : Response(_alloc)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _Response_type;
   ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  Response;


  typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HuboWaveTrajResponse
typedef  ::hackdrc_wave_planner::HuboWaveTrajResponse_<std::allocator<void> > HuboWaveTrajResponse;

typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajResponse> HuboWaveTrajResponsePtr;
typedef boost::shared_ptr< ::hackdrc_wave_planner::HuboWaveTrajResponse const> HuboWaveTrajResponseConstPtr;

struct HuboWaveTraj
{

typedef HuboWaveTrajRequest Request;
typedef HuboWaveTrajResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct HuboWaveTraj
} // namespace hackdrc_wave_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "addb8940cea6d43e85929ef93646783f";
  }

  static const char* value(const  ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaddb8940cea6d43eULL;
  static const uint64_t static_value2 = 0x85929ef93646783fULL;
};

template<class ContainerAllocator>
struct DataType< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hackdrc_wave_planner/HuboWaveTrajRequest";
  }

  static const char* value(const  ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Empty Request\n\
\n\
================================================================================\n\
MSG: std_msgs/Empty\n\
\n\
";
  }

  static const char* value(const  ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4cb9f5822aabec545fe5637862264401";
  }

  static const char* value(const  ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4cb9f5822aabec54ULL;
  static const uint64_t static_value2 = 0x5fe5637862264401ULL;
};

template<class ContainerAllocator>
struct DataType< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hackdrc_wave_planner/HuboWaveTrajResponse";
  }

  static const char* value(const  ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_msgs/JointTrajectory Response\n\
\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
";
  }

  static const char* value(const  ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HuboWaveTrajRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HuboWaveTrajResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hackdrc_wave_planner::HuboWaveTraj> {
  static const char* value() 
  {
    return "483580a368d8caaee0fa0f82c8e2e571";
  }

  static const char* value(const hackdrc_wave_planner::HuboWaveTraj&) { return value(); } 
};

template<>
struct DataType<hackdrc_wave_planner::HuboWaveTraj> {
  static const char* value() 
  {
    return "hackdrc_wave_planner/HuboWaveTraj";
  }

  static const char* value(const hackdrc_wave_planner::HuboWaveTraj&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "483580a368d8caaee0fa0f82c8e2e571";
  }

  static const char* value(const hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hackdrc_wave_planner/HuboWaveTraj";
  }

  static const char* value(const hackdrc_wave_planner::HuboWaveTrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "483580a368d8caaee0fa0f82c8e2e571";
  }

  static const char* value(const hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hackdrc_wave_planner/HuboWaveTraj";
  }

  static const char* value(const hackdrc_wave_planner::HuboWaveTrajResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HACKDRC_WAVE_PLANNER_SERVICE_HUBOWAVETRAJ_H

